on:
    push:
      branches:
        - master
        - main
      paths-ignore:
        - '*.md'
    pull_request:
      branches:
        - master
        - main
name: test
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
        id: go

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v8

  test:
    strategy:
      matrix:
        go-version: ['^1.14.0', '^1.23.0']
        platform: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Install Go
        if: success()
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Run tests
        run: go test -v -race ./...

  fuzz:
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Get Cache Directory
        run: echo "FUZZ_CACHE=$(go env GOCACHE)/fuzz" >> $GITHUB_ENV

      - name: Cache generated corpus
        uses: actions/cache@v4
        with:
          path: ${{ env.FUZZ_CACHE }}
          key: fuzz-${{ runner.os }}-${{ steps.go.outputs.go-version }}-${{ hashFiles('go.sum') }}
          restore-keys: |
            fuzz-${{ runner.os }}-${{ steps.go.outputs.go-version }}-

      - name: Call the Fuzz
        run: go test -v -fuzz=FuzzNewPath -fuzztime=30s ./pkg/yamlpath/fuzz
